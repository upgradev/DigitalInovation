
-----List
    ArrayList
    Vector

        garante ordem de inserção
        permite edição sem regras adicionais
        permite ordenação atraves de comparators
    
    Queue
        LinkedList
        Garante ordenação de inserção (first in first out)
        permite adição, leitura e remoção seguindo a regra  (first in first out)
        não permite mudança de ordenação


------ Set

    Por padrão não garante a ordem inserção
    não permite itens repetidos
    permite adição, remoção, não possui busca por item e atualização, para leitura apenas navegação
    não permite mudança de ordenação

    HashSet
        usar quando é necessario manter uma ordenação;
        nao é ordenado e não permite valores repetidos;
        por não ter repetição de valores e não ser ordenado é a 
        implementação mais performatica;

    LinkedHashSet
        usar quando é necessario manter uma ordenação de inserção dos elementos;
        mantem a ordem de inserção dos elementos;
        é a implementação mais lenta por ser necessaria manter ordem;

    TreeSet
        usar quando é necessario alterar a ordem atraves do uso de comparators;
        mantem a ordem e pode ser reordenado;
        e performatico para leitura. Para modificação tem a necessidade de reordenar,
        sendo mais lento que o LinkedHashSet;


----------- Map
    entrada chave valor;
    permite valores repetidos, mas não permite repetição de chave;
    permite adição, busca por chave ou valor, atualização, remoção e navegação;
    pode ser ordenado;

        HashMap
            mais performatico

        TreeMap


        HashTable

----------- comparators
    algoritmo de ordenação
    utilizado primariamente em java.utils.List
    permite ordenação de objetos complexos

    Comparator 
        Interface para definir classe com regra de ordenação
    
    Comparable
        Interface para definir regra de ordenação em uma classe de dominio

------------- optional
    tratamento de valores que podem ser nulos
    possui dois estados
        presente
        vazio
    permite que voce execute operações em valores que podem ser nulos sem preocupação com as 
    famosas nullpointerexceptions

------------- stream api
    manipulações de coleções com o paradigma funcional de forma paralela
    imutavel - não altera a coleção de origem, sempre cria uma nova coleção
    funcionalidades
        mapping - retorna uma coleção com os mesmos tamanhos da origem com os elementos alterados
        filtering - retorna uma coleção igual ou menor que a coleção origem, com os elementos intactos
        fortEach - executa uma determinada logica para cada elemento retornando nada
        peek - executa uma determinada logicva para cada elemento, retornando a propria coleção
        couting - retorna um inteiro que representa a contagem de elementos
        grouping - retorna uma coleção agrupada de acordo com a regra definida

